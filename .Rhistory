points(lstat,fitted(fit6),col="red",pch=20)
fit7=lm(medv~poly(lstat,4))
points(lstat,fitted(fit7),col="blue",pch=20)
plot(1:20,1:20,pch=1:20,cex=2)
plot(medv~lstat)
points(lstat,fitted(fit6),col="red",pch=20)
fit7=lm(medv~poly(lstat,4))
points(lstat,fitted(fit7),col="blue",pch=20)
fix(Carseats)
names(Carseats)
summary(Carseats)
names(Carseats)
summary(Carseats)
contrasts(Carseats$ShelveLoc)
fit1=lm(Sales~.+Income:Advertising+Age:Price,Carseats)
summary(fit1)
contrasts(Carseats$ShelveLoc)
regplot=function(x,y){
fit=lm(y~x)
plot(x,y)
abline(fit,col="red")
}
attach(Carseats)
regplot(Price,Sales)
regplot=function(x,y,...){
fit=lm(y~x)
plot(x,y,...)
abline(fit,col="red")
}
regplot(Price,Sales,xlab="Price",ylab="Sales",col="blue",pch=20)
library(ggplot2)
df<-data.frame(country = "China", type = 0, treat = 0, predict=0.26, upper=0.34, lower=0.192, stringsAsFactors = FALSE)
df<-rbind(df, c("China", 0, 1, 0.394, 0.305, 0.491))
df<-rbind(df, c("China", 1, 0, 0.012, 0.05, 0.001))
df<-rbind(df, c("China", 1, 1, 0.067, 0.127, 0.0285))
df<-rbind(df, c("Russia", 0, 0, 0.585, 0.551, 0.616))
df<-rbind(df, c("Russia", 0, 1, 0.607, 0.578, 0.635))
df<-rbind(df, c("Russia",1, 0, 0.069, 0.054, 0.086))
df<-rbind(df, c("Russia", 1, 1, 0.126, 0.107, 0.146))
df<-rbind(df, c("Thailand", 0, 0, 0.952, 0.930, 0.968))
df<-rbind(df, c("Thailand", 0, 1, 0.957, 0.938, 0.971))
df<-rbind(df, c("Thailand", 1, 0, 0.056, 0.038, 0.082))
df<-rbind(df, c("Thailand", 1, 1, 0.181, 0.152, 0.211))
df<-rbind(df, c("Vietnam", 0, 0, 0.904, 0.874, 0.929))
df<-rbind(df, c("Vietnam", 0, 1, 0.932, 0.915, 0.948))
df<-rbind(df, c("Vietnam", 1, 0, 0.033, 0.019, 0.054))
df<-rbind(df, c("Vietnam", 1, 1, 0.074, 0.057, 0.093))
df<-rbind(df, c("Morocco", 0, 0, 0.389, 0.318, 0.462))
df<-rbind(df, c("Morocco", 0, 1, 0.571, 0.510, 0.629))
df<-rbind(df, c("Morocco", 1, 0, 0.098, 0.059, 0.151))
df<-rbind(df, c("Morocco", 1, 1, 0.327, 0.275, 0.388))
df<-rbind(df, c("Indonesia", 0, 0, 0.898, 0.866, 0.925))
df<-rbind(df, c("Indonesia", 0, 1, 0.903, 0.886, 0.919))
df<-rbind(df, c("Indonesia", 1, 0, 0.067, 0.046, 0.094))
df<-rbind(df, c("Indonesia", 1, 1, 0.11, 0.101, 0.134))
dfv<-subset(df, type == 0)
dfp<-subset(df, type ==1)
ugh<-ggplot(dfp, aes(as.numeric(predict), country, colour = treat))
ugh+geom_point() + ggtitle("Effect of Membership on Protesting") +
xlab("Probability of Protesting") +
scale_colour_hue(name = "", breaks=c(0,1),
labels=c("Non-Members", "Members")) +
theme(plot.title = element_text(size=16, family="Impact")) +
scale_x_continuous(limits = c(0,0.5), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5)) +
geom_errorbarh(aes(xmax= as.numeric(upper), xmin = as.numeric(lower)))
a= 3.18341
library(ggplot2)
install.packages("extrafont")
library(extrafont)
font_import("Arial")
font_import("Arial")
df<-data.frame(country = "China", type = 0, treat = 0, predict=0.26, upper=0.34, lower=0.192, stringsAsFactors = FALSE)
df<-rbind(df, c("China", 0, 1, 0.394, 0.305, 0.491))
df<-rbind(df, c("China", 1, 0, 0.012, 0.05, 0.001))
df<-rbind(df, c("China", 1, 1, 0.067, 0.127, 0.0285))
df<-rbind(df, c("Russia", 0, 0, 0.585, 0.551, 0.616))
df<-rbind(df, c("Russia", 0, 1, 0.607, 0.578, 0.635))
df<-rbind(df, c("Russia",1, 0, 0.069, 0.054, 0.086))
df<-rbind(df, c("Russia", 1, 1, 0.126, 0.107, 0.146))
df<-rbind(df, c("Thailand", 0, 0, 0.952, 0.930, 0.968))
df<-rbind(df, c("Thailand", 0, 1, 0.957, 0.938, 0.971))
df<-rbind(df, c("Thailand", 1, 0, 0.056, 0.038, 0.082))
df<-rbind(df, c("Thailand", 1, 1, 0.181, 0.152, 0.211))
df<-rbind(df, c("Vietnam", 0, 0, 0.904, 0.874, 0.929))
df<-rbind(df, c("Vietnam", 0, 1, 0.932, 0.915, 0.948))
df<-rbind(df, c("Vietnam", 1, 0, 0.033, 0.019, 0.054))
df<-rbind(df, c("Vietnam", 1, 1, 0.074, 0.057, 0.093))
df<-rbind(df, c("Morocco", 0, 0, 0.389, 0.318, 0.462))
df<-rbind(df, c("Morocco", 0, 1, 0.571, 0.510, 0.629))
df<-rbind(df, c("Morocco", 1, 0, 0.098, 0.059, 0.151))
df<-rbind(df, c("Morocco", 1, 1, 0.327, 0.275, 0.388))
df<-rbind(df, c("Indonesia", 0, 0, 0.898, 0.866, 0.925))
df<-rbind(df, c("Indonesia", 0, 1, 0.903, 0.886, 0.919))
df<-rbind(df, c("Indonesia", 1, 0, 0.067, 0.046, 0.094))
df<-rbind(df, c("Indonesia", 1, 1, 0.11, 0.101, 0.134))
dfv<-subset(df, type == 0)
dfp<-subset(df, type ==1)
fonts()
font_import(pattern="[A/a]rial")
fonts()
ugh<-ggplot(dfp, aes(as.numeric(predict), country, colour = treat))
ugh+geom_point() + ggtitle("Effect of Membership on Protesting") +
xlab("Probability of Protesting") +
scale_colour_hue(name = "", breaks=c(0,1),
labels=c("Non-Members", "Members")) +
theme(plot.title = element_text(size=16, family="Arial")) +
scale_x_continuous(limits = c(0,0.5), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5)) +
geom_errorbarh(aes(xmax= as.numeric(upper), xmin = as.numeric(lower)))
a= 3.18341
ugh<-ggplot(dfv, aes(as.numeric(predict), country, colour = treat))
ugh+geom_point() + ggtitle("Effect of Membership on Voting") +
xlab("Probability of Voting") +
scale_colour_hue(name = "", breaks=c(0,1),
labels=c("Non-Members", "Members")) +
theme(plot.title = element_text(size=16, family="Arial")) +
scale_x_continuous(limits = c(0,1), breaks=c(0, 0.25, 0.5, 0.75, 1)) +
geom_errorbarh(aes(xmax= as.numeric(upper), xmin = as.numeric(lower)))
a= 3.18341
ugh<-ggplot(dfp, aes(as.numeric(predict), country, colour = treat))
ugh+geom_point() + ggtitle("Effect of Membership on Protesting") +
xlab("Probability of Protesting") +
scale_colour_hue(name = "", breaks=c(0,1),
labels=c("Non-Members", "Members")) +
theme(plot.title = element_text(size=16, family="Arial")) +
scale_x_continuous(limits = c(0,0.5), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5)) +
geom_errorbarh(aes(xmax= as.numeric(upper), xmin = as.numeric(lower)))
a= 3.18341
ugh<-ggplot(dfp, aes(as.numeric(predict), country, colour = treat))
ugh+geom_point() + ggtitle("Effect of Membership on Protesting") +
xlab("Probability of Protesting") +
scale_colour_hue(name = "", breaks=c(0,1),
labels=c("Non-Members", "Members")) +
theme(plot.title = element_text(size=16)) +
scale_x_continuous(limits = c(0,0.5), breaks=c(0, 0.1, 0.2, 0.3, 0.4, 0.5)) +
geom_errorbarh(aes(xmax= as.numeric(upper), xmin = as.numeric(lower)))
a= 3.18341
ugh<-ggplot(dfv, aes(as.numeric(predict), country, colour = treat))
ugh+geom_point() + ggtitle("Effect of Membership on Voting") +
xlab("Probability of Voting") +
scale_colour_hue(name = "", breaks=c(0,1),
labels=c("Non-Members", "Members")) +
theme(plot.title = element_text(size=16, family="Arial")) +
scale_x_continuous(limits = c(0,1), breaks=c(0, 0.25, 0.5, 0.75, 1)) +
geom_errorbarh(aes(xmax= as.numeric(upper), xmin = as.numeric(lower)))
a= 3.18341
require(ISLR)
names(Smarket)
summary(Smarket)
?Smarket
pairs(Smarket,col=Smarket$Direction)
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial)
summary(glm.fit)
glm.probs=predict(glm.fit,type="response")
glm.probs[1:5]
attach(Smarket)
table(glm.pred,Direction)
glm.pred=ifelse(glm.probs>0.5,"Up","Down")
attach(Smarket)
table(glm.pred,Direction)
mean(glm.pred==Direction)
train = Year<2005
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial, subset=train)
glm.probs=predict(glm.fit,newdata=Smarket[!train,],type="response")
glm.pred=ifelse(glm.probs >0.5,"Up","Down")
glm.pred=ifelse(glm.probs >0.5,"Up","Down")
Direction.2005=Smarket$Direction[!train]
table(glm.pred,Direction.2005)
mean(glm.pred==Direction.2005)
glm.fit=glm(Direction~Lag1+Lag2,
data=Smarket,family=binomial, subset=train)
glm.probs=predict(glm.fit,newdata=Smarket[!train,],type="response")
glm.pred=ifelse(glm.probs >0.5,"Up","Down")
table(glm.pred,Direction.2005)
mean(glm.pred==Direction.2005)
106/(76+106)
require(MASS)
summary(glm.probs)
summary(glm.fit)
lda.fit=lda(Direction~Lag1+Lag2,data=Smarket, subset=Year<2005)
lda.fit
plot(lda.fit)
?lda
Smarket.2005=subset(Smarket,Year==2005)
lda.pred=predict(lda.fit,Smarket.2005)
lda.pred[1:5,]
lda.pred[1:5]
plot(lda.fit)
plot(lda.fit)
lda.pred[1:5,]
class(lda.pred)
data.frame(lda.pred)[1:5,]
table(lda.pred$class,Smarket.2005$Direction)
mean(lda.pred$class==Smarket.2005$Direction)
library(class)
?knn
attach(Smarket)
Xlag=cbind(Lag1,Lag2)
train=Year<2005
knn.pred=knn(Xlag[train,],Xlag[!train,],Direction[train],k=1)
table(knn.pred,Direction[!train])
mean(knn.pred==Direction[!train])
Xlag[1:5,]
knn.pred=knn(Xlag[train,],Xlag[!train,],Direction[train],k=2)
table(knn.pred,Direction[!train])
mean(knn.pred==Direction[!train])
knn.pred=knn(Xlag[train,],Xlag[!train,],Direction[train],k=3)
table(knn.pred,Direction[!train])
mean(knn.pred==Direction[!train])
knn.pred=knn(Xlag[train,],Xlag[!train,],Direction[train],k=4)
table(knn.pred,Direction[!train])
mean(knn.pred==Direction[!train])
load("C:/Users/j/Downloads/depression.RData")
View(depression)
attach(depression)
depression$Gender<-replace(Gender, Gender == 1, 'Female')
depression$Gender<-replace(Gender, Gender == 2, 'Male')
load("C:/Users/j/Downloads/friends.RData")
t<-table(friends); t
percent<-100*t/sum(t); percent
pie(t)
pf<-format(percent, digits = 3)
lbl = paste(c("No dif", "Opp sex", "Same sex"), pf,"%",sep="");
pie(t,label=lbl)
load("C:/Users/j/Downloads/actor.RData")
attach(actor_age)
hist(actor_age$Age,breaks=8)
hist(actor_age$Age,breaks=20)
hist(actor_age$Age,breaks=8)
View(actor_age)
summary(age)
summary(Age)
(1+6+7+10+8+11+12+15)/9
(3+5*2+15*3+25*4+20*5+15*6+5*7+8+9)/90
63/2
17/63
120+1.5*(120-95)
summary(Age)
76-3
76-31
48.75-37.75
load("C:/Users/j/Downloads/graduation.RData")
attach(grad_data)
boxplot(grad_data)
names(grad_data)
require(ISLR)
attach(Wage)
fit=lm(wage~poly(age,4),data=Wage)
summary(fit)
agelims=range(age)
age.grid=seq(from=agelims[1],to=agelims[2])
preds=predict(fit,newdata=list(age=age.grid),se=TRUE)
se.bands=cbind(preds$fit+2*preds$se,preds$fit-2*preds$se)
plot(age,wage,col="darkgrey")
lines(age.grid,preds$fit,lwd=2,col="blue")
matlines(age.grid,se.bands,col="blue",lty=2)
fita=lm(wage~age+I(age^2)+I(age^3)+I(age^4),data=Wage)
summary(fita)
plot(fitted(fit),fitted(fita))
summary(fit)
fita=lm(wage~education,data=Wage)
fitb=lm(wage~education+age,data=Wage)
fitc=lm(wage~education+poly(age,2),data=Wage)
fitd=lm(wage~education+poly(age,3),data=Wage)
anova(fita,fitb,fitc,fitd)
fit=glm(I(wage>250) ~ poly(age,3), data=Wage, family=binomial)
summary(fit)
preds=predict(fit,list(age=age.grid),se=T)
se.bands=preds$fit + cbind(fit=0,lower=-2*preds$se,upper=2*preds$se)
se.bands[1:5,]
prob.bands=exp(se.bands)/(1+exp(se.bands))
matplot(age.grid,prob.bands,col="blue",lwd=c(2,1,1),lty=c(1,2,2),type="l",ylim=c(0,.1))
points(jitter(age),I(wage>250)/10,pch="|",cex=.5)
require(splines)
fit=lm(wage~bs(age,knots=c(25,40,60)),data=Wage)
plot(age,wage,col="darkgrey")
lines(age.grid,predict(fit,list(age=age.grid)),col="darkgreen",lwd=2)
abline(v=c(25,40,60),lty=2,col="darkgreen")
fit=smooth.spline(age,wage,df=16)
lines(fit,col="red",lwd=2)
fit=smooth.spline(age,wage,cv=TRUE)
lines(fit,col="purple",lwd=2)
fit
require(gam)
install.packages("gam")
require(gam)
gam1=gam(wage~s(age,df=4)+s(year,df=4)+education,data=Wage)
par(mfrow=c(1,3))
plot(gam1,se=T)
gam2=gam(I(wage>250)~s(age,df=4)+s(year,df=4)+education,data=Wage,family=binomial)
plot(gam2)
gam2a=gam(I(wage>250)~s(age,df=4)+year+education,data=Wage,family=binomial)
anova(gam2a,gam2,test="Chisq")
par(mfrow=c(1,3))
lm1=lm(wage~ns(age,df=4)+ns(year,df=4)+education,data=Wage)
plot.gam(lm1,se=T)
load("C:/Users/j/Downloads/7.R.RData")
plot(y, x)
par(mfrow=1)
plot(y, x)
lm(y ~ x)
m <- lm(y ~ x)
summary(m)
m2 <- lm(y ~ poly(x, 2))
summary(m2)
m2 <- lm(y ~ x + I(x^2))
summary(m2)
plot(y, x)
1998 - 18
1290/20
4*(0.9+0.8*0.5+0.75*0.5)
12*0.5+12*0.25
0.9*4*(0.25+0.2)
0.5*12*(0.25)
6*0.65*(0.5*0.75+0.75*0.25)
6*0.65*(0.5*0.75*2+2*0.75*0.25)
0.75*3*(0.5*0.65*2+2*0.7*0.35)
0.7*6*(2*0.3*0.9+2*0.85*0.1)
0.9*3*(2*0.7*0.7 + 2*0.3*0.8)
41315/11000000
150/750
(5-4)^2 + (3-4)^2 + 1 + 1
-2 + 0.5*6
4*16
64+32
64+32+4*32
2*8+2*32
(7921+5184+3336+4761)/4
4761-5300.5
7921-3336
-539.5/4585
(89+72+94+69)/4
8/(94-69)
(7921+5184+8836+4761)/4
(4761-6675.5)/(8836-4761)
(7921+5184+8836+4761)/4
(5184-6675.5)/(8836-4761)
load(url("http://www-stat.stanford.edu/~tibs/ElemStatLearn/datasets/ESL.mixture.rda"))
attach(ESL.mixture)
plot(x,col=y+1)
dat=data.frame(y=factor(y),x)
fit=svm(factor(y)~.,data=dat,scale=FALSE,kernel="radial",cost=5)
library(e1071)
dat=data.frame(y=factor(y),x)
fit=svm(factor(y)~.,data=dat,scale=FALSE,kernel="radial",cost=5)
xgrid=expand.grid(X1=px1,X2=px2)
ygrid=predict(fit,xgrid)
plot(xgrid,col=as.numeric(ygrid),pch=20,cex=.2)
points(x,col=y+1,pch=19)
func=predict(fit,xgrid,decision.values=TRUE)
func=attributes(func)$decision
xgrid=expand.grid(X1=px1,X2=px2)
ygrid=predict(fit,xgrid)
plot(xgrid,col=as.numeric(ygrid),pch=20,cex=.2)
points(x,col=y+1,pch=19)
contour(px1,px2,matrix(func,69,99),level=0,add=TRUE)
contour(px1,px2,matrix(prob,69,99),level=.5,add=TRUE,col="blue",lwd=2) #thispredicts the function itself from the data
6*4*365
((1.01)^3 + 0.99^3)/0.02
((1.01)^3 + 0.99^3))/0.02
((1.01)^3 + (0.99)^3))/0.02
((1.01)^3 + (0.99)^3)/0.02
1.01^3
1.01^3 +0.99^3
2.006/0.02
((1.01)^3 - (0.99)^3)/0.02
(2*1.01^3 + 2 - 2*0.99^3 - 2)/0.02
84/(85+15)
85/(85+15)
85/(85+890)
p <- 85/(85+890)
r <- 85/(85+15)
(2*p*4)/(p + r)
p <- 85/(85+890)
(2*p*r)/(p+r)
install.packages('RH2')
install.packages('sqldf')
install.packages("Rtools")
install.packages("shiny")
library(devtools)
install.packages("devtools")
Sys.getenv("PATH")
Sys.getenv("PATH")
system()
system('g++ -v')
Sys.getenv('PATH')
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
z <- makeVector()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
y <- cachemean()
a <- 1:100000
a <- rnorm(10000000)
z <- cachemean(a)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## cacheSolve computes the inverse of the matrix. If the inverse has already
## been calculated, then it retrieves it from the cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
d <- x$get()
m <- solve(d, ...)
x$setinverse(m)
m
}
z <- makeCacheMatrix()
c <- c(8, 3, 0, 10, 4, 6, -2, 8, 9)
c <- matrix(c, 3)
z$get(c)
z$set(c)
z$get()
cacheSolve(z)
z$get()*cacheSolve(z)
10000^-1
z$set(matrix(rnorm(10000), 10000))
25000*.015 + 20
install.packages(c("arm", "bdsmatrix", "BH", "caTools", "data.table", "DataCombine", "DBI", "devtools", "e1071", "foreign", "formatR", "Formula", "gdata", "ggplot2", "glmnet", "gplots", "gsubfn", "gtools", "highr", "htmltools", "httpuv", "httr", "knitr", "labeling", "Lahman", "lme4", "magrittr", "maptools", "markdown", "Matrix", "memoise", "mgcv", "mime", "minqa", "mnlogit", "nlme", "nnet", "plotrix", "plyr", "randomForest", "Rcpp", "RcppEigen", "RCurl", "reshape", "reshape2", "RH2", "RJDBC", "RJSONIO", "rmarkdown", "RSQLite", "Rttf2pt1", "sandwich", "scales", "shiny", "sp", "statmod", "texreg", "xtable", "zoo"))
install.packages("installr")
library(installr)
updateR()
library(shiny)
check.for.updates.R()
sys.getenv('PATH')
Sys.getenv('PATH')
#This file creates the data for the shiny app
#packages
library(plyr)
library(dplyr)
library(ggvis)
#read in WVS data
setwd("C:/Dropbox/Projects/Dissertation/WVS/trust.app")
wvs <- read.csv(file = "wvs_20141208.csv", stringsAsFactors = FALSE)
list <- read.csv(file = "WVSw6_list.csv", stringsAsFactors = FALSE)
wvs <- merge(wvs, list, by = c("cid"), all.x = TRUE)
wvs <- wvs %>%
filter(is.na(country) == FALSE)
wvs$country.year <- paste(wvs$country, wvs$survey.year, sep = " - ")
countries <- unique(wvs$country.year)
#loop through countries, run model and create
for (c in 1:length(countries)) {
d <- wvs %>%
filter(wvs$country.year == countries[c])
#model
m <- glm(conf_govd ~ as.factor(sex) + age + as.factor(uni) + as.factor(hs) +
income + as.factor(unemp) + as.factor(polinterestd),
data = d, family = "binomial")
#build data set of predicted values
p <- data.frame(matrix(nrow = 174, ncol = 8))
colnames(p) <- c("countryyr", "sex", "age", "uni", "hs", "income", "unemp", "polinterestd")
p$countryyr <- d[1, "country.year"]
p$cyr_n <- c
p$sex <- 2
p$age <- seq(from = 18, to = 75, by = 1)
p$uni <- rep(c(1, 0, 0), each = 58)
p$hs <- rep(c(0, 1, 0), each = 58)
p$income <- mean(d$income, na.rm = TRUE)
p$unemp <- 0
p$polinterestd <- ifelse(mean(d$polinterestd, na.rm = TRUE) > 0.5, 1, 0)
p$category <- rep(c("College", "High School", "< High School"), each = 58)
p2 <- cbind(p, predict(m, newdata = p, type = "link", se = TRUE))
p2 <- within(p2, {
predictedprob <- plogis(fit)
LL <- plogis(fit - (1.96 * se.fit))
UL <- plogis(fit + (1.96 * se.fit))
})
if(c == 1) {
data_predict <- p2
} else data_predict <- rbind(data_predict, p2)
}
data_predict$category <- factor(data_predict$category, levels = c("College", "High School", "< High School"))
write.csv(data_predict, file = "20141209_data_forapp.csv")
save(data_predict, file = "wvs.app.RData")
write.csv(data_predict, file = "20141209_data_forapp.csv")
rmarkdown::render('index.Rmd')
